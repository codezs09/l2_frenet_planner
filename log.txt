06.01
- interface change from ctypes to cpp call

06.02~06.04
- change car and obstacle class and methods
- refactor CubicSpline2D method
- Refactor to_frenet and to_cartesian methods

06.05
- Add ToFrenet and ToCartesian methods for Obstacle class
- Update ego car pose and obstacle poses to next state in the loop

06.06
- refactor Car getPose methods
- finish main loop framework

06.07
- box to box collision detection
- if not collided, then calculate box to box distance calculation (at the end it's point to line problem)
- add rotate and pose_to_box utils
- add getBox method for Obstacle and Car class
- improve is_collision speed by avoiding unnecessary SAT check
- refactor is_collision and inverse_distance_to_obstacle method for FrenetPath class

06.08
- fix build and warning errors 
- add termination condition for main loop when the ego car reaches to end of destination
- add time cost calculation for main loop
- fix running bugs: 
    - json parsing error
    - parse waypoint bugs
    - fix search_index not containing last element for CubicSpline1D
    - fix find_s bug for CubicSpline2D

06.09
- FIX moving clitch with gdb debugging tool
- FIX no response to obstacles
- Using MessagePack to do data logging for following fields 
    - timestamp
    - ego car (pose, twist, accel)
    - best path (poses)
    - obstacles (pose)
    - candidate paths (poses)

06.10
- Add postprocessing script for logged data, with
    - data parsing
    - visualization
        - ego car box 
        - candiate trajectories in grey 
        - best trajectory in red
        - waypoints and its fitted cubic reference line (OPTIONAL)
        - obstacles and predicted movements
        - lane lines 

06.20
- Add lane lines instead of single waypoints
- Add lane change logic
- Add logic to decide which lane the obstacle is currently in

06.23
- Loop paths for each lane
- Debug
- Trajectory selection for each lane

06.25
- Log and Visualize each lane and path
    - Every lane boundary (cubis spline representation)
    - Every selected trajectories in each Lane

06.28
- Fix bug: ego car not in lane

06.29
- Refactor to local planning
    - Convert to local frame w.r.t. ego car

06.30
    - Add ego car state change estimation
    - Add initial planning point at local frame, planning_init_point_local

07.03
    - Pipeline for local planning able to run but trajectory selected around 3.5s not expected. 
    - Add unit test for coordinate conversion between global and local pose

07.04
    - Add plots for local planning. Nothing wrong from the local planning results
    - Add gtest and unit tests for coordinate conversion between Cartesian and Frenet frame

07.06
    - Print cost to debug why path selection jumps.

07.24
    - add flag to choose between local vs global planning: FLAGS_local_planning, global fine
    - TODO: Single frame debug mode? (Nahh..)

07.25
    - Add mode to: Need to output trajectories for each lane; plot all cadidate trajectories on each d; and costs
    - Problem identified. Wrong output of collision check results. Add unit test.
    - Found the bug: numeric_limits<double>::min() caution to use (representing the minimum POSITIVE double value)
    
07.26
    - Refactor the lane width: moving from hyperparameter to bind to json definition.
    - Test sensor drift: add noise to ego car pose and obstacle pose.

07.27 
    - Add plots for sensor effects
    - Fixed a bug of sensor noise generation (wrong data types ints)
    - Add unit tests for Gaussian noise generation: pass. 
    - Dubug why the test failed with drift? (UNKNOWN) -> FIXED somehow but not sure why. Line 508 main.cpp 
        - Reason explained in doc: 07/29/2023 Planning Drifting for Local Planning
        - Revert the change
    - Identified problem of state change estimation. Temp Fix made. 

07.30 
    - Refactor temp fix to neat and relate sensor error to add-on state change estimation error. 


    - TODO: Add following/stopping mode. (THIS IS A BIG CHANGE)
    - TOFIX: 
        - yaw, yaw_rate, and yaw_accel are not matched. 
        - Initial yaw jump not reasonable. 


- FrenetOptimalTrajectory 输出单条lane下选择的最优路径和相应 costs，可能为空

CHANGES: 
- may use pybind11 instead of ctypes. Tried but vector size change not supported.
- update methods w.r.t obstables: isCollision, etc. 
- change obstacle representation to four corners
- Add moving cars  ->  Needs fake Prediction module
- Change planning frequency to 10 Hz
- Add more lanes, add lane deciding logic
- Add following/stopping mode, Lane Change mode

- Add sensor models and state estimation module. 
- finish planning in local coordinates. 
- convert global coordinates to local.
- convert back to global. 


Question: 
- 每帧是要update initial conditions 包括 obstacle的位置的
- Obstacles define has a problem: Only defined bottom-left and 
  upper-right corners while assuming its edges parallel to axis. 
- is obstacle shape converted in Frenet as well? 